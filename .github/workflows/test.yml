on:
  workflow_dispatch:
  push:
    tags:
      - "v*"
    branches:
      - "**"

name: CI

jobs:
  build_and_test:
    name: Rust project
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            bin: git-workspace
            name: git-workspace-Linux-x86_64.tar.gz
          - os: macOS-latest
            bin: git-workspace
            name: git-workspace-Darwin-x86_64.tar.gz
          - os: windows-latest
            bin: git-workspace.exe
            name: git-workspace-Windows-x86_64.zip
    env:
      GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
      GITLAB_ALTERNATIVE_TOKEN: ${{ secrets.GITLAB_TOKEN }}
      GITHUB_ALTERNATIVE_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GCM_INTERACTIVE: never
      GIT_TERMINAL_PROMPT: 0
      RUST_BACKTRACE: "1"
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
      release_profile: "release"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.7

      - name: Set workspace var
        shell: bash
        run: |
          mkdir -p "$RUNNER_TEMP/workspace-test-dir/"
          echo GIT_WORKSPACE=$RUNNER_TEMP/workspace-test-dir/ >> $GITHUB_ENV

      - name: Switch SSH to https
        shell: bash
        run: |
          git config --global url."https://gitlab.com/".insteadOf git@gitlab.com:
          git config --global url."https://github.com/".insteadOf git@github.com:
          git config --global url."https://".insteadOf git://
          if [[ "${{ matrix.os }}" == "windows-latest" ]]
          then
            git config --global credential.helper wincred
          fi

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-on-failure: "false"

      - name: git workspace add github org
        run: cargo run -- add github django --exclude "/django.*" --env-name GITHUB_ALTERNATIVE_TOKEN

      - name: git-workspace update
        run: cargo run -- update

      - name: git-workspace fetch
        run: cargo run -- fetch

      - name: git-workspace list
        run: cargo run -- list

      - name: Remove workspace
        shell: bash
        run: echo > ${GIT_WORKSPACE}/workspace.toml

      - name: git-workspace archive
        run: cargo run -- archive --force

      - name: Build release
        if: startsWith(github.ref, 'refs/tags/') || inputs.publish-tag
        run: cargo build --profile=${{env.release_profile}}

      - name: Package
        if: startsWith(github.ref, 'refs/tags/') || inputs.publish-tag
        shell: bash
        run: |
          strip target/${{env.release_profile}}/${{ matrix.bin }}
          cd target/${{env.release_profile}}
          if [[ "${{ matrix.os }}" == "windows-latest" ]]
          then
          7z a ../../${{ matrix.name }} ${{ matrix.bin }}
          else
          tar czvf ../../${{ matrix.name }} ${{ matrix.bin }}
          fi
          cd -

      - name: Archive binaries
        uses: actions/upload-artifact@v4
        if: startsWith(github.ref, 'refs/tags/') || inputs.publish-tag
        with:
          name: build-${{ matrix.name }}
          path: ${{ matrix.name }}

  checks:
    name: Checks
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: "1"
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.publish-tag || null }}

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.7

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-on-failure: "false"

      - name: Run cargo fmt
        if: success() || failure()
        run: cargo fmt --all -- --check

      - name: Run cargo check
        if: success() || failure()
        run: cargo check

      - name: Run cargo clippy
        if: success() || failure()
        run: cargo clippy --all-targets --all-features -- -D warnings

  coverage:
    name: Tests with coverage
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: "1"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-on-failure: "false"
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate LLVM coverage report
        run: cargo llvm-cov --all-features --workspace --codecov --output-path codecov.json

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: codecov.json
          fail_ci_if_error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
